(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{152:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h4",{attrs:{id:"赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 赋值")]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),s("p",[t._v("有了数据，我们能做很多操作。但本文只说说对数据做的第一个操作：赋值。声明变量之后，就在内存分配了一块位置，\n但这个位置的内容是未知的，赋值就是把这块位置的内容设为一个确定的值。")])]),s("p",[t._v("Java中基本类型、数组、对象的赋值有明显不同，本文介绍基本类型和数组的赋值，关于对象后续文章会详述。")]),s("p",[t._v("我们先来说基本类型的赋值，然后再说数组的赋值。")]),s("h4",{attrs:{id:"基本类型的赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的赋值","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型的赋值")]),s("h5",{attrs:{id:"整数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 整数类型")]),s("p",[t._v("整数有byte,short,int,long 分别占用1/2/4/8个字节取值范围分别是:")]),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),s("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")])])]),s("tbody",[s("tr",[s("td",[t._v("byte")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2^7 ~ 2^7-1")])]),s("tr",[s("td",[t._v("short")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2^15 ~ 2^15-1")])]),s("tr",[s("td",[t._v("int")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2^31 ~ 2^31-1")])]),s("tr",[s("td",[t._v("long")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("-2^63 ~ 2^63-1")])])])]),s("p",[t._v("我们用^表示指数，2^7即2的7次方。这个范围我们不需要记的那么清楚，有个大概范围认识就可以了，\n大多数日常应用，一般用int就可以了。后续文章会从二进制的角度进一步分析表示范围为什么会是这样的。")]),s("p",[t._v("赋值形式很简单，直接把熟悉的数字常量形式赋值给变量即可，对应的内存空间的值就从未知变成了确定的常量。\n但常量不能超过对应类型的表示范围。例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("23")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("short")]),t._v(" s "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3333")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("9999")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("32323")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("但是，在给long类型赋值时，如果常量超过了int的表示范围，需要在常量后面加大写或小写的L，即L或l，例如:")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("long")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3232343433")]),t._v("L"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这个是由于数字常量默认为是int类型。")]),s("h5",{attrs:{id:"小数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小数类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 小数类型")]),s("p",[t._v("小数类型有float和double，占用的内存空间分别是4和8个字节，有不同的取值范围和精度，double表示的范围更大，精度更高，具体来说：")]),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),s("th",{staticStyle:{"text-align":"center"}},[t._v("取值范围")])])]),s("tbody",[s("tr",[s("td",[t._v("float")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("1.4E-45 ~ 3.4E+38-3.4E+38 ~-1.4E-45")])]),s("tr",[s("td",[t._v("double")]),s("td",{staticStyle:{"text-align":"center"}},[t._v("4.9E-324 ~1.7E+308-1.7E+308 ~ -4.9E-324")])])])]),s("p",[t._v("取值范围看上去很奇怪，一般我们也不需要记住，有个大概印象就可以了。E表示以10为底的指数，E后面的+号和-号代表正指数和负指数，\n例如：1.4E-45表示1.4乘以10的-45次方。后续文章会进一步分析小数的二进制表示。")]),s("p",[t._v("对于double，直接把熟悉的小数表示赋值给变量即可，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("333.33")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("但对于float，需要在数字后面加大写F或小写f，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("333.33f")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这个是由于小数常量默认为是double类型。")]),s("p",[t._v("除了小数，也可以把整数直接赋值给float或double，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("33")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3333333333333")]),t._v("L"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("boolean类型")]),s("p",[t._v("这个很简单，直接使用true或false赋值，分别表示真和假，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("字符类型")]),s("p",[t._v("字符类型char用于表示一个字符，这个字符可以是中文字符，也可以是英文字符。在内存中，\nJava用两个字节表示一个字符。赋值时把常量字符用单引号括起来，不要使用双引号，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'A'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" z "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'中'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("关于字符类型有一些细节，后续文章会进一步深度解析。")]),s("h4",{attrs:{id:"一些说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些说明","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些说明")]),s("p",[t._v("上面介绍的赋值都是直接给变量设置一个常量值。但也可以把变量赋给变量，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("100")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("变量可以进行各种运算（后续文章讲解），也可以将变量的运算结果赋给变量，例如：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//2乘以a的值再加上b的值赋给c")]),t._v("\n")])])]),s("p",[t._v("上面介绍的赋值都是在声明变量的时候就进行了赋值，但这不是必须的，可以先声明变量，随后再进行赋值。")]),s("h4",{attrs:{id:"数组类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组类型")]),s("h5",{attrs:{id:"赋值语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 赋值语句")]),s("p",[t._v("基本类型的数组有三种赋值形式，如下所示：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token number"}},[t._v("2.")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token number"}},[t._v("3.")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" arr"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("第一种和第二种都是预先知道数组的内容，而第三种是先分配长度，然后再给每个元素赋值。")]),s("p",[t._v("第三种形式中，即使没有给每个元素赋值，每个元素也都有一个默认值，这个默认值跟数组类型有关。\n数值类型的值为0，boolean为false, char为空字符。")]),s("p",[t._v("数组长度可以动态确定，如下所示：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//根据一些条件动态计算")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("p",[t._v("虽然可以动态确定，但定了之后就不可以变，数组有一个length属性，但只能读，不能改。")]),s("p",[t._v("一个小细节，不能在给定初始值的同时还给定长度，即如下格式是不允许的：")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("int[] arr = new int[3]{1,2,3}\n")])])]),s("p",[t._v("这是可以理解的，因为初始值已经决定了长度，再给个长度，如果还不一致，计算机将无所适从。")]),s("h4",{attrs:{id:"数组和基本类型的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组和基本类型的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组和基本类型的区别")]),s("p",[t._v("一个基本类型变量，内存中只会有一块对应的内存空间。但数组有两块，一块用于存储数组内容本身，另一块用于存储内容的位置。")]),s("p",[t._v("用一个例子来说明，有一个int变量a，和一个int数组变量arr，其代码，变量对应的内存地址和内存内容如下所示：")]),s("p",[t._v("代码\t                     内存地址\t                            内存数据")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("100")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t            "),s("span",{attrs:{class:"token number"}},[t._v("1000")]),t._v("\t                                "),s("span",{attrs:{class:"token number"}},[t._v("100")]),t._v("\nint"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t    "),s("span",{attrs:{class:"token number"}},[t._v("2000")]),t._v("\t                                "),s("span",{attrs:{class:"token number"}},[t._v("3000")]),t._v("\n \t                        "),s("span",{attrs:{class:"token number"}},[t._v("3000")]),t._v("\t                                "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n \t                        "),s("span",{attrs:{class:"token number"}},[t._v("3004")]),t._v("\t                                "),s("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n \t                        "),s("span",{attrs:{class:"token number"}},[t._v("3008")]),t._v("\t                                "),s("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),s("p",[t._v("基本类型a的内存地址是1000，这个位置存储的就是它的值100。")]),s("p",[t._v("数组类型arr的内存地址是2000，这个位置存储的值是一个位置3000，3000开始的位置存储的才是实际的数据1,2,3。")]),s("h5",{attrs:{id:"为什么数组要用两块空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么数组要用两块空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么数组要用两块空间")]),s("p",[t._v("不能只用一块空间吗？我们来看下面这个代码：")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arrA "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arrB "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("6")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{attrs:{class:"token number"}},[t._v("7")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narrA "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrB"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这个代码中，arrA初始的长度是3，arrB的长度是4，后来将arrB的值赋给了arrA。\n如果arrA对应的内存空间是直接存储的数组内容，那么它将没有足够的空间去容纳arrB的所有元素。")]),s("p",[t._v("用两块空间存储，这个就简单的多，arrA存储的值就变成了和arrB的一样，\n存储的都是数组内容{4,5,6,7}的地址，此后访问arrA就和arrB是一样的了，\n而arrA {1,2,3}的内存空间由于无人引用会被垃圾回收，如下所示："),s("br"),s("img",{attrs:{src:"https://raw.githubusercontent.com/chengzh100/image_db/master/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180626104726.png",alt:"image"}}),t._v("\n由上，也可以看出，给数组变量赋值和给数组中元素赋值是两回事。给数组中元素赋值是改变数组内容，而给数组变量赋值则会让变量指向一个不同的位置。")]),s("p",[t._v("上面我们说数组的长度是不可以变的，不可变指的是数组的内容空间，一经分配，长度就不能再变了，但是可以改变数组变量的值，让它指向一个长度不同的空间，就像上例中arrA后来指向了arrB一样。")]),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结")]),s("p",[t._v("给变量赋值就是将变量对应的内存空间设置为一个明确的值，有了值之后，变量可以被加载到CPU，CPU可以对这些值进行各种运算，运算后的结果又可以被赋值给变量，保存到内存中。")]),s("p",[t._v("数据可以进行哪些运算？如何进行运算呢？")])])}],!1,null,null,null);a.default=r.exports}}]);